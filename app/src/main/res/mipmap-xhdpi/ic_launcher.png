package uz.myapps.learnjava.fragments

import android.content.ContentValues
import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProviders
import com.google.android.material.snackbar.Snackbar
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser
import com.google.firebase.firestore.FieldValue
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.android.synthetic.main.fragment_test.*
import kotlinx.android.synthetic.main.fragment_test.view.*
import kotlinx.android.synthetic.main.fragment_title.view.*
import uz.myapps.learnjava.MainActivity
import uz.myapps.learnjava.R
import uz.myapps.learnjava.enums.SwipeDirection
import uz.myapps.learnjava.models.BasicPlan
import uz.myapps.learnjava.models.Plan
import uz.myapps.learnjava.models.Test
import uz.myapps.learnjava.viewmodels.JavaViewModel

private const val ARG_PARAM1 = "test"
private const val ARG_PARAM2 = "listSize"
private const val ARG_PARAM3 = "plan"
private const val ISEND = "isEnd"
private const val BASICPLAN = "basicPlan"

class TestFragment : Fragment() {
    private var test: Test? = null
    private var listSize: Int? = null
    private var plan: Plan? = null
    private var isEnd: Boolean? = null
    private var basicPlan: BasicPlan? = null
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        arguments?.let {
            test = it.getSerializable(ARG_PARAM1) as Test
            listSize = it.getInt(ARG_PARAM2)
            plan = it.getSerializable(ARG_PARAM3) as Plan
            isEnd = it.getBoolean(ISEND)
            basicPlan = it.getSerializable(BASICPLAN) as BasicPlan
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val root = inflater.inflate(R.layout.fragment_test, container, false)
        val currentUser = FirebaseAuth.getInstance().currentUser!!
        val javaViewModel = ViewModelProviders.of(this)[JavaViewModel::class.java]
        if (plan!!.haveUsedUsers.contains(currentUser.uid) || plan?.id == 0 && basicPlan!!.haveUsedUsers.contains(
                currentUser.uid
            )
        )
            LessonFragment.vp.setAllowedSwipeDirection(SwipeDirection.ALL)
        else
            LessonFragment.vp.setAllowedSwipeDirection(SwipeDirection.LEFT)
        if (LessonFragment.vp.currentItem == 0) MenuFragment.count = 0
        var isCheck = 0
        var list = ArrayList<String>()
        list.add(test?.answer1!!)
        list.add(test?.answer2!!)
        list.add(test?.answer3!!)
        list.add(test?.answer4!!)
        list.shuffle()
        root.question.text = test?.question?.replace("&n&", "\n", false)

        var answer = ""
        root.answer1.text = list[0]
        root.answer2.text = list[1]
        root.answer3.text = list[2]
        root.answer4.text = list[3]
        root.rg.setOnCheckedChangeListener { group, checkedId ->
            when (checkedId) {
                R.id.answer1 -> {
                    answer = answer1.text.toString()
                }
                R.id.answer2 -> {
                    answer = answer2.text.toString()
                }
                R.id.answer3 -> {
                    answer = answer3.text.toString()
                }
                R.id.answer4 -> {
                    answer = answer4.text.toString()
                }
            }
        }
        root.btn_check.setOnClickListener {
            when (isCheck) {
                0 -> {
                    if (answer == test?.realAnswer) {
                        root.btn_check.text = "Davom etish"
                        Snackbar.make(it, "To'g'ri", Snackbar.LENGTH_LONG)
                            .setTextColor(resources.getColor(R.color.white1))
                            .setAction("Action", null).show()
                        LessonFragment.vp.setAllowedSwipeDirection(SwipeDirection.ALL)
                        MenuFragment.count++
                        if (plan!!.haveUsedUsers.contains(currentUser.uid) || plan?.id == 0 && basicPlan!!.haveUsedUsers.contains(
                                currentUser.uid
                            )
                        ) {
                            javaViewModel.getTestData().observe(requireActivity(), Observer {
                                if (LessonFragment.vp.currentItem != (listSize!! * 2 - 1)) {
                                    LessonFragment.vp.currentItem += 1
                                } else {
                                    